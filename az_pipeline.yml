---
trigger: none

pr:
  - develop

variables:
  imageNameBacktend: 'mrjadhav/full_stack_backend'
  imageNameFrontend: 'mrjadhav/full_stack_frontend'     # This is repos name
#  tag: '$(Build.BuildId)'
  tag: 470

stages:
#  - stage: Build
#    displayName: BuildAndPushIimages
#    pool:
#      name: default
#    #  vmImage: ubuntu-latest
#    jobs:
#      - job: BuildImagesForBackend
#        displayName: BuildImagesForBackend
#        steps:
#          - task: Docker@2
#            displayName: 'Build docker image and push to repository'
#            inputs:
#              command: buildAndPush
#              Dockerfile: './backend/Dockerfile'
#              containerRegistry: 'DockerHub'
#              repository: 'mrjadhav/full_stack_backend'
#              tags: '$(Build.BuildId)'
#
#      - job: BuildImagesForFrontend
#        displayName: BuildImagesForFrontend
#        steps:
#          - task: Docker@2
#            displayName: 'Build docker image and push to repository'
#            inputs:
#              command: buildAndPush
#              Dockerfile: './frontend/Dockerfile'
#              containerRegistry: 'DockerHub'
#              repository: 'mrjadhav/full_stack_frontend'
#              tags: '$(Build.BuildId)'
   
  - stage: DockerImageScanUsingTrivy
    displayName: DockerImageScanUsingTrivy
    pool:
      name: default
#    dependsOn: Build
    jobs:
#      - job: TrivyInstallation
#        displayName: TrivyInstallation
#        steps:
#          - task: CmdLine@2
#            displayName: 'Install Trivy'
#            inputs:
#              script: |
#                sudo apt-get install wget apt-transport-https gnupg lsb-release
#                wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
#                echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
#                sudo apt-get update
#                sudo apt-get install trivy
      
      - job: DockerImageScan
        displayName: DockerImageScan
        steps:
          - task: CmdLine@2
            displayName: 'Run Trivy Scan for frontend'
            inputs:
              script: |
                trivy image --exit-code 0 --severity CRITICAL, HIGH --no-progress $(imageNameFrontend):$(tag)

#          - task: CmdLine@2
#            displayName: 'Run Trivy Scan for backend'
#            inputs:
#              script: |
#                trivy image --format json -o trivy-results.xml $(imageNameBacktend):$(tag)

          - task: PublishTestResults@2
            displayName: 'Publish Trivy Scan Results'
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/trivy-results.xml'
              mergeTestResults: true
              failTaskOnFailedTests: true
              testRunTitle: 'Trivy - Vulnerabilities Summary'




#  - stage: TestStage
#    displayName: Running Tests
#    pool:
#      vmImage: windows-latest
##    dependsOn: []
#    jobs:    
#      - job: RunningApplication
#        displayName: Running Application
#        steps:
#          - powershell: |  
#              # Install Docker Desktop
#              choco install docker-desktop -y
#            displayName: Installing DockerDesktop
#          
#          - powershell: |
#              # Start Docker Desktop
#              Start-Process "C:\Program Files\Docker\Docker\Docker Desktop.exe" -WindowStyle Minimized
#            displayName: Starting the DockerDesktop
#
#          - powershell: |
#              # Run Docker Compose
#              docker compose up -d
#            displayName: Running docker compose file